#!/usr/bin/env python
# -*- coding: utf-8 -*-

import optparse
import os
import re

from models import tit

def list(command, options, _tit):
    """Lists todo items
Usage: tit list [list/all]
    tit list                    -- displays the current todo list
    tit list [list]             -- displays the todo list items in this list
    tit list all                -- displays all items in all lists
    tit list help               -- displays this helpful text"""

    if command['list'] == 'all' or command['list'] == 'a':
        print format_output(_tit.list(finished=options.finished))
    elif command['list']:
        if command['list'].isdigit():
            print format_output(_tit.find(id=command['list']).list(finished=options.finished))
        else:
            print format_output(_tit.find(name=command['list']).list(finished=options.finished))
    else:
        print format_output(_tit.current_list.list(finished=options.finished))

def add(command, options, _tit):
    """Creates a new item or list
Usage: tit add [type] [name] [priority/description/text]
    tit add item [name] [priority]      -- creates a new item
    tit add list [name] [description]   -- creates a new list
    tit add comment [item] [text]       -- adds a comment to an item
    tit add help                        -- dislpays this helpful text"""

    if command['type'] == 'item' or command['type'] == 'i':
        if 'priority' in command.keys():
            _tit.current_list.add( \
                    new_name=command['name'].decode('utf-8'), \
                    new_priority=command['priority'].decode('utf-8'))
        else:
            _tit.current_list.add( \
                    new_name=command['name'].decode('utf-8'))

        print 'New item saved'
        print format_output(_tit.current_list.list(finished=options.finished))
    elif command['type'] == 'list' or command['type'] == 'l':
        if 'priority' in command.keys():
            _tit.add( \
                    new_name=command['name'].decode('utf-8'), \
                    new_description=command['priority'].decode('utf-8'))
        else:
            _tit.add(new_name=command['name'].decode('utf-8'))

        print 'New list saved'
        if _tit.find(name=command['name']) == _tit.current_list:
            print format_output(_tit.current_list.list(finished=options.finished))
        else:
            print format_output(_tit.list(finished=options.finished))
    elif command['type'] == 'comment' or command['type'] == 'c':
        i = None

        if command['name'].isdigit():
            i = _tit.current_list.find(id=int(command['name']))
        else:
            i = _tit.current_list.find(name=command['name'].decode('utf-8'))

        if i is not None:
            i.add(new_text=command['priority'].decode('utf-8'))
            print 'New comment saved'
        else:
            print 'Item not found'
            print add.__doc__
            return

        print format_output(_tit.current_list.list(finished=options.finished))

    _tit.save(filename=options.file)

def rm(command, options, _tit):
    """Removes an item, list, or comment
Usage: tit rm [type] [item] [subitem]
    tit rm item [item]                -- removes an item from the current list
    tit rm comment [item] [comment]   -- removes a comment from an item
    tit rm list [list]                -- removes a list
    tit rm help                       -- displays this helpful text"""

    # tit rm item [item]
    if command['type'] == 'item' or command['type'] == 'i':
        if command['item'].isdigit():
            _tit.current_list.rm(rm_id=int(command['item']))
        else:
            _tit.current_list.rm(rm_name=command['item'].decode('utf-8'))

        print 'Item removed'
        print format_output(_tit.current_list.list(finished=options.finished))
    # tit rm comment [item] [comment]
    elif command['type'] == 'comment' or command['type'] == 'c':
        i = None
        if command['item'].isdigit():
            i = _tit.current_list.find(id=int(command['item']))
        else:
            i = _tit.current_list.find(name=command['item'].decode('utf-8'))

        if command['subitem'].isdigit() and i:
            i.rm(rm_id=int(command['subitem']))
        elif i:
            i.rm(rm_text=command['subitem'].decode('utf-8'))

        print 'Comment removed'
        print format_output(_tit.current_list.list(finished=options.finished))
    # tit rm list [list]
    elif command['type'] == 'list' or command['type'] == 'l':
        l = None
        if command['item'].isdigit():
            l = _tit.find(id=int(command['item']))
        else:
            l = _tit.find(name=command['item'].decode('utf-8'))

        if l == _tit.current_list:
            _tit.current_list = None or _tit.lists[0]

        _tit.rm(rm_list=l)

        print 'List removed'
        print format_output(_tit.list(finished=options.finished))

    _tit.save(filename=options.file)

def switch(command, options, _tit):
    """Switches the current todo lists
Usage: tit switch [list]
    tit switch [list]    -- switches to the list
    tit switch help      -- displays this helpful text"""
    if command['list'].isdigit():
        _tit.current_list = _tit.find(id=command['list'])
    else:
        _tit.current_list = _tit.find(name=command['list'].decode('utf-8'))

    if _tit.current_list is None:
        print 'Error finding list'
        return

    print format_output(_tit.current_list.list(finished=options.finished))
    _tit.save(filename=options.file)

def change(command, options, _tit):
    """Changes an item, list, or comment
Usage: tit change [type] [item] [subitem] [value]
    tit change item [item] [value]                -- changes the value of an item
    tit change priority [item] [value]            -- changes the priority of an item
    tit change comment [item] [comment] [value]   -- changes the comment to an item
    tit change list [list] [value]                -- changes the name of a list
    tit change description [list] [value]         -- changes the description of a list
    tit change help                               -- displays this helpful text"""

    # tit change item [item] [value]
    if command['type'] == 'item' or command['type'] == 'i':
        if command['item'].isdigit():
            _tit.current_list.change(command['subitem'].decode('utf-8'), ch_id=int(command['item']))
        else:
            _tit.current_list.change(command['subitem'].decode('utf-8'), ch_name=command['item'].decode('utf-8'))

        print 'Item changed'
        print format_output(_tit.current_list.list(finished=options.finished))
    # tit change priority [item] [value]
    if command['type'] == 'priority' or command['type'] == 'p':
        if command['item'].isdigit():
            _tit.current_list.find(id=int(command['item'])).priority = int(command['subitem'])
        else:
            _tit.current_list.find(name=command['item'].decode('utf-8')).priority = int(command['subitem'])

        print 'Priority changed'
        print format_output(_tit.current_list.list(finished=options.finished))
    # tit change comment [item] [comment] [value]
    if command['type'] == 'comment' or command['type'] == 'c':
        i = None
        if command['item'].isdigit():
            i = _tit.current_list.find(id=int(command['item']))
        else:
            i = _tit.current_list.find(name=command['item'].decode('utf-8'))

        if i is not None:
            if command['subitem'].isdigit():
                i.change(command['value'], ch_id=int(command['subitem']))
            else:
                print "command['subitem'] is not a digit"
                i.change(command['value'], ch_text=command['subitem'].decode('utf-8'))

        print 'Comment changed'
        print format_output(_tit.current_list.list(finished=options.finished))
    # tit change list [list] [value]
    if command['type'] == 'list' or command['type'] == 'l':
        if command['item'].isdigit():
            _tit.change(command['subitem'], ch_id=int(command['item']))
        else:
            _tit.change(command['subitem'], ch_name=command['item'].decode('utf-8'))

        print 'List changed'
        print format_output(_tit.list(finished=options.finished))
    # tit change description [list] [value]
    if command['type'] == 'list' or command['type'] == 'd':
        if command['item'].isdigit():
            _tit.find(id=int(command['item'])).description = command['subitem'].decode('utf-8')
        else:
            _tit.change(name=command['item']).description = command['subitem'].decode('utf-8')

        print 'Description changed'
        print format_output(_tit.list(finished=options.finished))

    _tit.save(filename=options.file)

def start(command, options, _tit):
    """Starts an item in the active list
Usage: tit start [item]
    tit start help                               -- displays this helpful text"""

    if command['item'].isdigit():
        _tit.current_list.find(id=int(command['item'])).start()
    else:
        _tit.current_list.find(name=command['item'].decode('utf-8')).start()

    _tit.save(filename=options.file)
    print format_output(_tit.current_list.list(finished=options.finished))

def pause(command, options, _tit):
    """Pauses an item in the active list
Usage: tit pause [item]
    tit pause help                               -- displays this helpful text"""

    if command['item'].isdigit():
        _tit.current_list.find(id=int(command['item'])).pause()
    else:
        _tit.current_list.find(name=command['item'].decode('utf-8')).puase()

    _tit.save(filename=options.file)
    print format_output(_tit.current_list.list(finished=options.finished))

def finish(command, options, _tit):
    """Pauses an item in the active list
Usage: tit pause [item]
    tit pause help                               -- displays this helpful text"""

    if command['item'].isdigit():
        _tit.current_list.find(id=int(command['item'])).finish()
    else:
        _tit.current_list.find(name=command['item'].decode('utf-8')).finish()

    _tit.save(filename=options.file)
    print format_output(_tit.current_list.list(finished=options.finished))

_usage = u"""usage: %prog [command]
In this case command can be any of these commands:
    list - lists todo-items in the current list
    add - adds todo-items, comments and lists
    remove - removes todo-items and lists
    change - changes lists, todo-items and comments
    start - starts a todo-item
    pause - pauses/stops a todo-item
    finish - todo-item is marked finished
    switch - switches the current list to another list

For more information about the commands type '%prog [command] help'"""
_version = "%prog 0.0.1"

_commands = {
    # Tit commands
    'list': {
        'min_arg_count': 0,
        'args': ['list'],
        'function': list,
        'alias': 'ls',
    },
    'add': {
        'min_arg_count': 2,
        'args': ['type', 'name', '[priority]'],
        'function': add,
    },
    'remove': {
        'min_arg_count': 2,
        'args': ['type', 'item', '[subitem]'],
        'function': rm,
        'alias': 'rm',
    },
    'change': {
        'min_arg_count': 2,
        'args': ['type', 'item', '[subitem]', '[value]'],
        'function': change,
        'alias': 'ch',
    },
    'start': {
        'min_arg_count': 1,
        'args': ['item'],
        'function': start,
    },
    'finish': {
        'min_arg_count': 1,
        'args': ['item'],
        'function': finish,
        'alias': 'fin',
    },
    'pause': {
        'min_arg_count': 1,
        'args': ['item'],
        'function': pause,
        'alias': 'pau',
    },
    'switch': {
        'min_arg_count': 1,
        'args': ['list'],
        'function': switch,
        'alias': 'sw',
    },
}

_todo_lists_file = '%s/.tit/todo_lists' % os.getenv('HOME')

_re_arg_is_optional = re.compile(r"^\[.*\]$")

_term_col = {
    'black': 30,
    'red': 31,
    'green': 32,
    'yellow': 33,
    'blue': 34,
    'magenta': 35,
    'cyan': 36,
    'white': 37,
}

_formatting = {
    '$CLEAR':    '\033[0m',
    '$INFO':     '\033[0;%dm' % _term_col['yellow'],
    '$ID':       '\033[1;%dm' % _term_col['cyan'],
    '$LIST':     '\033[1;%dm' % _term_col['green'],
    '$0ITEM':    '\033[0;%dm' % _term_col['green'],
    '$1ITEM':    '\033[0;%dm' % _term_col['green'],
    '$2ITEM':    '\033[0;%dm' % _term_col['white'],
    '$3ITEM':    '\033[0;%dm' % _term_col['yellow'],
    '$4ITEM':    '\033[0;%dm' % _term_col['yellow'],
    '$5ITEM':    '\033[0;%dm' % _term_col['red'],
    '$ITEM':     '',
    '$FINISHED': '\033[0;37m',
    '$TIME':     '\033[0;%dm' % _term_col['blue'],
    '$CURRENT':  '\033[0;4m',
}

def format_output(string):
    for key in _formatting.keys():
        string = string.replace(key, _formatting[key])

    return string

def main():
    (command, options) = get_arguments()

    if command is None and options is None:
        return

    if options.file is not None:
        _tit = tit.load(options.file)
    else:
        _tit = tit.load()

    #_tit = pickle.loads('%s_serial' % options.file)

    if _tit.current_list is None:
        print 'No lists found, only list creation command supported'

    arguments = (command, options, _tit)
    if 'function' in command.keys():
        command['function'](*arguments)
    else:
        print 'This this not implemented'

def get_arguments():
    parser = optparse.OptionParser(usage=_usage, version=_version)
    parser.add_option("-m", "--message", dest="message", help="Commit message")
    parser.add_option("-F", "--file", dest="file", help="xml data file")
    parser.add_option("-f", "--finished", action="store_true", default=False, dest="finished", help="Show finisehd items")

    (options, args) = parser.parse_args()

    if not len(args) > 0:
        parser.print_help()
        return None, None

    cmd = None

    for c in _commands.keys():
        if 'alias' in _commands[c].keys() and \
            args[0] == _commands[c]['alias']:
            cmd = c

    if not cmd and not args[0] in _commands.keys():
        parser.print_help()
        return None, None
    elif not cmd:
        cmd = args[0]

    if not 'function' in _commands[cmd].keys():
        print 'Function not implemented yet'
        parser.print_help()

    command = {
        'command': cmd,
        'function': _commands[cmd]['function']
    }

    if len(args) > 1 and args[1] == 'help':
        print command['function'].__doc__
        return None, None

    if not len(args) >= _commands[cmd]['min_arg_count']+1:
        print command['function'].__doc__
        return None, None

    args_offset = 1
    for i, arg in enumerate(_commands[cmd]['args']):
        if _re_arg_is_optional.match(arg) is not None and i >= len(args) - 1:
            args_offset -= 1
            continue

        try:
            command[arg.replace('[', '').replace(']', '')] = args[args_offset+i]
        except:
            command[arg] = None

    return command, options

if __name__ == '__main__':
    main()
